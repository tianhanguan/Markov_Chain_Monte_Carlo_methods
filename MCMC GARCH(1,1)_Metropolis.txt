
##The following code is used to simulate a GARCH(1,1) model with N=5000 data points 
##with a burn-in of n=1000 data points
library(fGarch)
library(truncnorm)
N <- 2100  #Run size
n <- 100  #Burn-in size
a <- c(0.8, 0.2, 0.5)  #GARCH(1,1) parameters theta=(omega,alpha,beta), dim=3

# Generate the GARCH(1,1) process iteratively by its definition
garch_11 = function(params,size) {
	y <- double(N)  #Actual data
	s <-double(N) #Volatility: s=sigma^2

	#define the starting distribution for y1 and s1
	y[1] <- 0.1
	s[1] <- 0.01

	e <- rnorm(N)  #Assume errors~Normal(0,1) 

	for(i in 2:N)  {
  		s[i] <- params[1]+params[2]*y[i-1]^2+params[3]*s[i-1]    
  		y[i] <- sqrt(s[i])*e[i]
	}
	return(y)
}

#Simulated true data of the previously defined GARCH(1,1) process
ygarch <- garch_11(a,N)[(n+1):N]
####################################################################################
##The following code fits the true data to a GARCH(1,1) process using
##various MCMC algorithm

#Iteratively calculate the logged posterior distribution 
g0 = function(s,y) { return( -0.5*log(s)-0.5*(y^2/s) ) }
g =  function(x) {
	#define the starting distribution for s1
	s <- 0.01
	gg <- g0(s,ygarch[1])

	for(i in 2:length(ygarch))  {
  	s <- x[1]+x[2]*ygarch[i-1]^2+x[3]*s
	gg <- gg+g0(s,ygarch[i]) 
	}	

	return(gg) 
} 

M = 40000  # run length
B = 20000  # amount of burn-in
X = c(runif(1),runif(1),runif(1))  # overdispersed starting distribution (dim=3)
sigma = 0.05  # proposal scaling
x1list = x2list = x3list = rep(0,M)  # for keeping track of values
numaccept = 0;

for (i in 1:M) {
    Y = X + sigma * rnorm(3)	#Proposal move (dim=3)
    U = log(runif(1))  # for accept/reject
    alpha = g(Y) - g(X)  # for accept/reject
    if ( (sum(Y>0)==3) && U < alpha) { #Reject all samples where any parameter is negative
	X = Y  # accept proposal
        numaccept = numaccept + 1;
    }

    x1list[i] = X[1];
    x2list[i] = X[2];
    x3list[i] = X[3];
    # Output progress report.
    if ((i %% 1000) == 0)
      cat (" ...",i);
}

#######################################################################
cat("ran Metropolis algorithm for", M, "iterations, with burn-in", B, "\n");
cat("acceptance rate =", numaccept/M, "\n");
u = mean(x1list[(B+1):M])
cat("mean of x1 is about", u, "\n")
v = mean(x2list[(B+1):M])
cat("mean of x2 is about", v, "\n")
w = mean(x3list[(B+1):M])
cat("mean of x3 is about", w, "\n")

varfact <- function(xxx) { 2 * sum(acf(xxx, plot=FALSE)$acf) - 1 }

se11 =  sd(x1list[(B+1):M]) / sqrt(M-B)
thevarfact1 = varfact(x1list[(B+1):M])
se1 = se11 * sqrt( thevarfact1 )
cat("true standard error of omega is about", se1, "\n")
cat("approximate 95% confidence interval of omega is (", u - 1.96 * se1, ",",
						u + 1.96 * se1, ")\n\n")

se12 =  sd(x2list[(B+1):M]) / sqrt(M-B)
thevarfact2 = varfact(x2list[(B+1):M])
se2 = se12 * sqrt( thevarfact2 )
cat("true standard error of alpha is about", se2, "\n")
cat("approximate 95% confidence interval of alpha is (", v - 1.96 * se2, ",",
						v + 1.96 * se2, ")\n\n")


se13 =  sd(x3list[(B+1):M]) / sqrt(M-B)
thevarfact3 = varfact(x3list[(B+1):M])
se3 = se13 * sqrt( thevarfact3 )
cat("true standard error of beta is about", se3, "\n")
cat("approximate 95% confidence interval of alpha is (", w - 1.96 * se3, ",",
						w + 1.96 * se3, ")\n\n")

par(mfrow=c(1,3))
plot(x1list,type='l',main="Time series plot of omega")
plot(x2list,type='l',main="Time series plot of alpha")
plot(x3list,type='l',main="Time series plot of beta")

par(mfrow=c(1,3))
acf(x1list,lag.max=250,main="Autocorrelation plot of omega")
acf(x2list,lag.max=250,main="Autocorrelation plot of alpha")
acf(x3list,lag.max=250,main="Autocorrelation plot of beta")
#####################################################################################################

